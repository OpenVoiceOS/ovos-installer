---
- name: Copy wrapper-ovos-phal-admin.sh file
  ansible.builtin.template:
    src: virtualenv/wrapper-ovos-phal-admin.sh.j2
    dest: /usr/local/bin/wrapper-ovos-phal-admin.sh
    owner: root
    group: root
    mode: "0755"
  when: ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server'

- name: Copy OVOS systemd unit files
  vars:
    _path_user: "{{ ovos_installer_user_home }}/.config/systemd/user"
    _path_system: "/etc/systemd/system"
    _notify_systemd_scope: "{{ 'Reload Systemd' if item.user == 'root' else 'Reload Systemd User' }}"
  ansible.builtin.template:
    src: "virtualenv/{{ item.unit }}.j2"
    dest: "{{ item.dest }}"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: "0644"
    backup: true
  notify: "{{ _notify_systemd_scope }}"
  loop:
    - {
        "unit": "ovos.service",
        "dest": "{{ _path_user }}/ovos.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-messagebus.service",
        "dest": "{{ _path_user }}/ovos-messagebus.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-core.service",
        "dest": "{{ _path_user }}/ovos-core.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-phal.service",
        "dest": "{{ _path_user }}/ovos-phal.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-phal-admin.service",
        "dest": "{{ _path_system }}/ovos-phal-admin.service",
        "user": "root",
        "group": "root",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-listener.service",
        "dest": "{{ _path_user }}/ovos-listener.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-audio.service",
        "dest": "{{ _path_user }}/ovos-audio.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-gui-websocket.service",
        "dest": "{{ _path_user }}/ovos-gui-websocket.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "unit": "ovos-gui.service",
        "dest": "{{ _path_user }}/ovos-gui.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "unit": "ovos-ggwave-listener.service",
        "dest": "{{ _path_user }}/ovos-ggwave-listener.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "hivemind-listener.service",
        "dest": "{{ _path_user }}/hivemind-listener.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if (ovos_installer_profile == 'listener' or ovos_installer_profile == 'server') else false }}",
      }
    - {
        "unit": "hivemind-satellite.service",
        "dest": "{{ _path_user }}/hivemind-satellite.service",
        "user": "{{ ovos_installer_user }}",
        "group": "{{ ovos_installer_group }}",
        "state": "{{ true if ovos_installer_profile == 'satellite' else false }}",
      }
  when: item.state | bool

- name: Flush handlers ovos
  ansible.builtin.meta: flush_handlers

- name: Enable and start OVOS and/or HiveMind systemd units
  vars:
    _state: "{{ 'restarted' if ovos_installer_configuration.changed | bool else 'started' }}"
  become: true
  become_user: "{{ item.user }}"
  ansible.builtin.systemd_service:
    name: "{{ item.unit }}"
    enabled: true
    force: true
    state: "{{ _state }}"
    scope: "{{ item.scope }}"
  loop:
    - {
        "unit": "ovos.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-messagebus.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-core.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if ovos_installer_profile != 'satellite' else false }}",
      }
    - {
        "unit": "ovos-phal.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-phal-admin.service",
        "scope": "system",
        "user": "root",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-listener.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-audio.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "ovos-gui-websocket.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "unit": "ovos-gui.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_feature_gui | bool and ovos_installer_profile != 'satellite') else false }}",
      }
    - {
        "unit": "ovos-ggwave-listener.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server') else false }}",
      }
    - {
        "unit": "hivemind-listener.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if (ovos_installer_profile == 'listener' or ovos_installer_profile == 'server') else false }}",
      }
    - {
        "unit": "hivemind-satellite.service",
        "scope": "user",
        "user": "{{ ovos_installer_user }}",
        "state": "{{ true if ovos_installer_profile == 'satellite' else false }}",
      }
  when: item.state | bool

- name: Block uninstall systemd
  when: ovos_installer_cleaning | bool
  tags:
    - uninstall
  block:
    - name: Stop and disable OVOS and/or HiveMind systemd units
      become: true
      become_user: "{{ item.user }}"
      ansible.builtin.systemd_service:
        name: "{{ item.unit }}"
        enabled: false
        state: stopped
        scope: "{{ item.scope }}"
      loop:
        - {
            "unit": "ovos.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-messagebus.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-core.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-phal.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {"unit": "ovos-phal-admin.service", "scope": "system", "user": "root"}
        - {
            "unit": "ovos-listener.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-audio.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-gui-websocket.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-gui.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "ovos-ggwave-listener.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "hivemind-listener.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
        - {
            "unit": "hivemind-satellite.service",
            "scope": "user",
            "user": "{{ ovos_installer_user }}",
          }
      register: _systemd_stop
      failed_when: _systemd_stop is not defined # We never want it to fail even if systemd unit doesn't exist

    - name: Remove OVOS systemd unit files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      notify:
        - Reload Udev
        - Reload Systemd User
      loop:
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-messagebus.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-core.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-phal.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-listener.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-audio.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-gui-websocket.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-gui.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/ovos-ggwave-listener.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/hivemind-listener.service"
        - "{{ ovos_installer_user_home }}/.config/systemd/user/hivemind-satellite.service"
        - /etc/systemd/system/ovos-phal-admin.service

    - name: Flush handlers ovos (uninstall)
      ansible.builtin.meta: flush_handlers

    - name: Remove directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ ovos_installer_user_home }}/.cache/mycroft"
        - "{{ ovos_installer_user_home }}/.config/mycroft"
        - "{{ ovos_installer_user_home }}/.config/hivemind"
        - "{{ ovos_installer_user_home }}/.config/OpenVoiceOS"
        - "{{ ovos_installer_user_home }}/.config/OvosTheme"
        - "{{ ovos_installer_user_home }}/.config/OvosDisplay.conf"
        - "{{ ovos_installer_user_home }}/.config/ovos-installer"
        - "{{ ovos_installer_user_home }}/.config/ovos_persona"
        - "{{ ovos_installer_user_home }}/.local/share/mycroft"
        - "{{ ovos_installer_user_home }}/.local/share/OpenVoiceOS"
        - "{{ ovos_installer_user_home }}/.local/share/precise-lite"
        - "{{ ovos_installer_user_home }}/.local/state/mycroft"
        - "{{ ovos_installer_user_home }}/.local/state/vosk"
        - "{{ ovos_installer_user_home }}/.local/state/ovos"
        - "{{ ovos_installer_user_home }}/nltk_data"
        - "{{ ovos_installer_user_home }}/stdout"
